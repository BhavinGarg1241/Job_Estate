{"ast":null,"code":"import axios from \"axios\";\nimport setAuthToken from \"../utils/setAuthToken\";\nimport jwt_decode from \"jwt-decode\";\nimport { GET_ERRORS, SET_CURRENT_USER, USER_LOADING } from \"./types\";\n\n// Register User\nexport const registerUser = (userData, history) => dispatch => {\n  axios.post(\"http://localhost:4000/user/register\", userData).then(res => alert(\"User registered successfully! You can log in now. \"), history.push(\"/register\")) // re-direct to login on successful register\n  .catch(err => dispatch({\n    type: GET_ERRORS,\n    payload: err.response.data\n  }));\n};\n\n// Login - get user token\nexport const loginUser = userData => dispatch => {\n  axios.post(\"http://localhost:4000/user/login\", userData).then(res => {\n    // Save to localStorage\n    // Set token to localStorage\n    const {\n      token\n    } = res.data;\n    localStorage.setItem(\"jwtToken\", token);\n    // Set token to Auth header\n    setAuthToken(token);\n    // Decode token to get user data\n    const decoded = jwt_decode(token);\n    // Set current user\n    dispatch(setCurrentUser(decoded));\n  }).catch(err => dispatch({\n    type: GET_ERRORS,\n    payload: err.response.data\n  }));\n};\n\n// Set logged in user\nexport const setCurrentUser = decoded => {\n  return {\n    type: SET_CURRENT_USER,\n    payload: decoded\n  };\n};\n\n// User loading\nexport const setUserLoading = () => {\n  return {\n    type: USER_LOADING\n  };\n};\n\n// Log user out\nexport const logoutUser = () => dispatch => {\n  // Remove token from local storage\n  localStorage.removeItem(\"jwtToken\");\n  // Remove auth header for future requests\n  setAuthToken(false);\n  // Set current user to empty object {} which will set isAuthenticated to false\n  dispatch(setCurrentUser({}));\n};","map":{"version":3,"names":["axios","setAuthToken","jwt_decode","GET_ERRORS","SET_CURRENT_USER","USER_LOADING","registerUser","userData","history","dispatch","post","then","res","alert","push","catch","err","type","payload","response","data","loginUser","token","localStorage","setItem","decoded","setCurrentUser","setUserLoading","logoutUser","removeItem"],"sources":["E:/Chitkara University/Third Year (2022-2023)/Semester 5/Backend Engineering/End Term/Job_Estate/frontend/src/actions/authActions.js"],"sourcesContent":["import axios from \"axios\";\r\nimport setAuthToken from \"../utils/setAuthToken\";\r\nimport jwt_decode from \"jwt-decode\";\r\nimport {\r\n    GET_ERRORS,\r\n    SET_CURRENT_USER,\r\n    USER_LOADING\r\n} from \"./types\";\r\n\r\n// Register User\r\nexport const registerUser = (userData, history) => dispatch => {\r\n    axios\r\n        .post(\"http://localhost:4000/user/register\", userData)\r\n        .then(res => alert(\"User registered successfully! You can log in now. \"),history.push(\"/register\")) // re-direct to login on successful register\r\n        .catch(err =>\r\n            dispatch({\r\n                type: GET_ERRORS,\r\n                payload: err.response.data,\r\n            })\r\n    );\r\n};\r\n\r\n// Login - get user token\r\nexport const loginUser = userData => dispatch => {\r\n    axios\r\n    .post(\"http://localhost:4000/user/login\", userData)\r\n    .then(res => {\r\n        // Save to localStorage\r\n        // Set token to localStorage\r\n        const { token } = res.data;\r\n        localStorage.setItem(\"jwtToken\", token);\r\n        // Set token to Auth header\r\n        setAuthToken(token);\r\n        // Decode token to get user data\r\n        const decoded = jwt_decode(token);\r\n        // Set current user\r\n        dispatch(setCurrentUser(decoded));\r\n    })\r\n    .catch(err =>\r\n            dispatch({\r\n            type: GET_ERRORS,\r\n            payload: err.response.data\r\n        })\r\n    );\r\n};\r\n\r\n// Set logged in user\r\nexport const setCurrentUser = decoded => {\r\n    return {\r\n        type: SET_CURRENT_USER,\r\n        payload: decoded\r\n    };\r\n};\r\n\r\n// User loading\r\nexport const setUserLoading = () => {\r\n    return {\r\n        type: USER_LOADING\r\n    };\r\n};\r\n\r\n// Log user out\r\nexport const logoutUser = () => dispatch => {\r\n    // Remove token from local storage\r\n    localStorage.removeItem(\"jwtToken\");\r\n    // Remove auth header for future requests\r\n    setAuthToken(false);\r\n    // Set current user to empty object {} which will set isAuthenticated to false\r\n    dispatch(setCurrentUser({}));\r\n};"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,YAAY,MAAM,uBAAuB;AAChD,OAAOC,UAAU,MAAM,YAAY;AACnC,SACIC,UAAU,EACVC,gBAAgB,EAChBC,YAAY,QACT,SAAS;;AAEhB;AACA,OAAO,MAAMC,YAAY,GAAG,CAACC,QAAQ,EAAEC,OAAO,KAAKC,QAAQ,IAAI;EAC3DT,KAAK,CACAU,IAAI,CAAC,qCAAqC,EAAEH,QAAQ,CAAC,CACrDI,IAAI,CAACC,GAAG,IAAIC,KAAK,CAAC,oDAAoD,CAAC,EAACL,OAAO,CAACM,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;EAAA,CACnGC,KAAK,CAACC,GAAG,IACNP,QAAQ,CAAC;IACLQ,IAAI,EAAEd,UAAU;IAChBe,OAAO,EAAEF,GAAG,CAACG,QAAQ,CAACC;EAC1B,CAAC,CAAC,CACT;AACL,CAAC;;AAED;AACA,OAAO,MAAMC,SAAS,GAAGd,QAAQ,IAAIE,QAAQ,IAAI;EAC7CT,KAAK,CACJU,IAAI,CAAC,kCAAkC,EAAEH,QAAQ,CAAC,CAClDI,IAAI,CAACC,GAAG,IAAI;IACT;IACA;IACA,MAAM;MAAEU;IAAM,CAAC,GAAGV,GAAG,CAACQ,IAAI;IAC1BG,YAAY,CAACC,OAAO,CAAC,UAAU,EAAEF,KAAK,CAAC;IACvC;IACArB,YAAY,CAACqB,KAAK,CAAC;IACnB;IACA,MAAMG,OAAO,GAAGvB,UAAU,CAACoB,KAAK,CAAC;IACjC;IACAb,QAAQ,CAACiB,cAAc,CAACD,OAAO,CAAC,CAAC;EACrC,CAAC,CAAC,CACDV,KAAK,CAACC,GAAG,IACFP,QAAQ,CAAC;IACTQ,IAAI,EAAEd,UAAU;IAChBe,OAAO,EAAEF,GAAG,CAACG,QAAQ,CAACC;EAC1B,CAAC,CAAC,CACL;AACL,CAAC;;AAED;AACA,OAAO,MAAMM,cAAc,GAAGD,OAAO,IAAI;EACrC,OAAO;IACHR,IAAI,EAAEb,gBAAgB;IACtBc,OAAO,EAAEO;EACb,CAAC;AACL,CAAC;;AAED;AACA,OAAO,MAAME,cAAc,GAAG,MAAM;EAChC,OAAO;IACHV,IAAI,EAAEZ;EACV,CAAC;AACL,CAAC;;AAED;AACA,OAAO,MAAMuB,UAAU,GAAG,MAAMnB,QAAQ,IAAI;EACxC;EACAc,YAAY,CAACM,UAAU,CAAC,UAAU,CAAC;EACnC;EACA5B,YAAY,CAAC,KAAK,CAAC;EACnB;EACAQ,QAAQ,CAACiB,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;AAChC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}